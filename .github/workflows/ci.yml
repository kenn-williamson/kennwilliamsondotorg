name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.90.0

jobs:
  backend-tests:
    name: Backend Tests & Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.0-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workdir: backend
          cache-on-failure: true

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Set up test environment
        working-directory: backend
        run: |
          cat > .env.test << EOF
          DATABASE_URL=postgres://testuser:testpass@localhost:5432/testdb
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test_jwt_secret_key_for_ci_testing_only
          FRONTEND_URL=http://localhost:3000
          BACKEND_URL=http://localhost:8080
          SESSION_SECRET=test_session_secret_for_ci_only
          AWS_REGION=us-east-1
          AWS_SES_FROM_EMAIL=test@example.com
          AWS_SES_DOMAIN_NAME=example.com
          AWS_SNS_TOPIC_ARN=arn:aws:sns:us-east-1:123456789012:test-topic
          GOOGLE_CLIENT_ID=test_google_client_id
          GOOGLE_CLIENT_SECRET=test_google_client_secret
          GOOGLE_REDIRECT_URI=http://localhost:8080/api/auth/google/callback
          EOF

      - name: Run database migrations
        working-directory: backend
        run: |
          cargo install sqlx-cli --no-default-features --features postgres
          sqlx migrate run
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb

      - name: Run tests with coverage
        working-directory: backend
        run: cargo tarpaulin --out Lcov --output-dir coverage/ --all-features
        env:
          DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379

      - name: Upload backend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/lcov.info
          retention-days: 30

      - name: Run Clippy lints
        working-directory: backend
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run security audit
        working-directory: backend
        run: cargo audit

  frontend-tests:
    name: Frontend Tests & Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run TypeScript type checking
        working-directory: frontend
        run: npx vue-tsc --noEmit

      - name: Run tests with coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload frontend coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/lcov.info
          retention-days: 30

      - name: Run security audit
        working-directory: frontend
        run: npm audit --audit-level=high

  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: false
          tags: backend:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          push: false
          tags: frontend:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  codecov-upload:
    name: Upload Coverage to Codecov
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: coverage/backend

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: coverage/frontend

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/backend/lcov.info,./coverage/frontend/lcov.info
          flags: backend,frontend
          fail_ci_if_error: false
          verbose: true

  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.backend-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-tests.result }}" != "success" ] || \
             [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "❌ CI pipeline failed"
            exit 1
          fi
          echo "✅ CI pipeline passed"
