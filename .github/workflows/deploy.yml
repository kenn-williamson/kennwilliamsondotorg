name: CD Pipeline - Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags (v1.0.0, v2.1.3, etc.)

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/kennwilliamsondotorg-backend:${{ steps.version.outputs.version }}
            ${{ env.IMAGE_PREFIX }}/kennwilliamsondotorg-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/kennwilliamsondotorg-frontend:${{ steps.version.outputs.version }}
            ${{ env.IMAGE_PREFIX }}/kennwilliamsondotorg-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push migrations image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: migrations.Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/kennwilliamsondotorg-migrations:${{ steps.version.outputs.version }}
            ${{ env.IMAGE_PREFIX }}/kennwilliamsondotorg-migrations:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: https://kennwilliamson.org

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment files to server
        run: |
          scp -i ~/.ssh/deploy_key \
            docker-compose.production.yml \
            scripts/deploy-from-registry.sh \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/

      - name: Deploy application
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/app

            # Set version to deploy
            export VERSION=${{ needs.build-and-push.outputs.version }}
            export GITHUB_USER=${{ github.repository_owner }}

            # Make deploy script executable
            chmod +x scripts/deploy-from-registry.sh

            # Run deployment
            ./scripts/deploy-from-registry.sh
          EOF

      - name: Verify deployment health
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/app

            # Wait for services to be healthy
            echo "⏳ Waiting for services to stabilize..."
            sleep 30

            # Check service health
            docker-compose -f docker-compose.production.yml ps

            # Check backend health endpoint
            if docker-compose -f docker-compose.production.yml exec -T backend wget -q --spider http://localhost:8080/health; then
              echo "✅ Backend health check passed"
            else
              echo "❌ Backend health check failed"
              exit 1
            fi

            # Check frontend health endpoint
            if docker-compose -f docker-compose.production.yml exec -T frontend wget -q --spider http://localhost:3000/api/health; then
              echo "✅ Frontend health check passed"
            else
              echo "❌ Frontend health check failed"
              exit 1
            fi

            echo "🎉 Deployment verification successful!"
          EOF

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/app
            echo "❌ Deployment failed, initiating rollback..."

            # Use the rollback script if it exists
            if [ -f scripts/rollback.sh ]; then
              chmod +x scripts/rollback.sh
              ./scripts/rollback.sh
            else
              echo "⚠️ Rollback script not found, manual intervention required"
            fi
          EOF

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: always()

    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment of ${{ needs.build-and-push.outputs.version }} to production succeeded!"
          echo "🌐 Application is live at https://kennwilliamson.org"

      - name: Deployment Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment of ${{ needs.build-and-push.outputs.version }} to production failed!"
          echo "🔍 Check the deployment logs for details"
          exit 1
