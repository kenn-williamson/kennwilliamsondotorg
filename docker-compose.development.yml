# Development Docker Compose Override
# This file automatically extends docker-compose.yml for development
# Usage: docker-compose up -d (automatically includes override)

services:
  # PostgreSQL - Development Configuration
  postgres:
    container_name: kennwilliamson-postgres-dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"  # Expose for local development tools (pgAdmin, etc.)
    
  # Backend - Development with Hot Reload
  backend:
    image: kennwilliamson-backend-dev  # Separate dev image to avoid conflicts
    build:
      context: ./backend
      dockerfile: Dockerfile.dev  # Development-specific Dockerfile
    container_name: kennwilliamson-backend-dev
    ports:
      - "8080:8080"  # Expose for direct API access (fallback)
    environment:
      - RUST_LOG=${RUST_LOG:-backend=debug,actix_web=debug,actix_web::middleware::logger=info}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/kennwilliamson
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://localhost  # Update for nginx proxy
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SES_FROM_EMAIL=${SES_FROM_EMAIL}
      - SES_REPLY_TO_EMAIL=${SES_REPLY_TO_EMAIL}
      - FRONTEND_URL=${FRONTEND_URL}
    volumes:
      - ./backend/src:/app/src:ro           # Mount source code (read-only)
      - ./backend/Cargo.toml:/app/Cargo.toml:ro
      - ./backend/Cargo.lock:/app/Cargo.lock:ro
      - ./backend/migrations:/app/migrations:ro  # Mount migrations
      - ./backend/templates:/app/templates:ro    # Mount email templates
      - backend_target_dev:/app/target      # Separate dev build cache
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2g  # Remove production memory constraints for development
        reservations:
          memory: 500m
    
  # Frontend - Development with Hot Reload  
  frontend:
    image: kennwilliamson-frontend-dev  # Separate dev image to avoid conflicts
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Development-specific Dockerfile
    container_name: kennwilliamson-frontend-dev
    ports:
      - "3000:3000"   # Expose for direct frontend access (fallback)
      - "24678:24678" # Nuxt DevTools port
    environment:
      - NODE_ENV=development
      - NUXT_PUBLIC_API_BASE=https://localhost/backend  # Client-side API base
      - NUXT_API_BASE=http://backend:8080/backend  # Server-side API base
      - NUXT_SESSION_PASSWORD=${NUXT_SESSION_PASSWORD}  # For Nuxt Auth Utils
      - JWT_SECRET=${JWT_SECRET}
      - CHOKIDAR_USEPOLLING=true  # For file watching in containers
      - NODE_OPTIONS=--max-old-space-size=1536  # Set Node.js heap size to 1.5GB
    volumes:
      - ./frontend/app:/app/app:ro              # Mount source code (read-only)
      - ./frontend/server:/app/server:ro        # Mount server directory (read-only)
      - ./frontend/shared:/app/shared:ro        # Mount shared directory (read-only)
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - ./frontend/nuxt.config.ts:/app/nuxt.config.ts:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts:ro  # Mount Tailwind config
      - frontend_node_modules_dev:/app/node_modules # Separate dev node_modules
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 2g  # Increase for Nuxt dev server with HMR
        reservations:
          memory: 500m

  # Nginx - Development Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: kennwilliamson-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/development.conf:/etc/nginx/conf.d/development.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    
  # Certbot - Disabled in development
  certbot:
    profiles:
      - production  # Only run in production profile

# Development-specific volumes with separate naming
volumes:
  postgres_data_dev:
    driver: local
  backend_target_dev:
    driver: local
  frontend_node_modules_dev:
    driver: local