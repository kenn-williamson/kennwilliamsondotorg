services:
  # PostgreSQL Database with UUIDv7 support
  postgres:
    image: ghcr.io/fboulnois/pg_uuidv7:1.6.0
    environment:
      POSTGRES_DB: kennwilliamson
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"  # Remove in production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Rust Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/kennwilliamson
      JWT_SECRET: ${JWT_SECRET}
      HOST: 0.0.0.0
      PORT: 8080
      RUST_LOG: ${RUST_LOG:-backend=info,actix_web=info}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "8080:8080"  # Remove in production
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 200m
        reservations:
          memory: 100m

  # Nuxt.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NUXT_PUBLIC_API_BASE: ${NUXT_PUBLIC_API_BASE:-http://localhost:8080/api}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3000:3000"  # Remove in production
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 250m
        reservations:
          memory: 150m

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/conf.d/security-headers.conf:/etc/nginx/conf.d/security-headers.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - certbot_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Database Migration Service
  # Runs automatically in production unless SKIP_MIGRATIONS=true
  # Skipped in development via SKIP_MIGRATIONS=true in .env.development
  migrations:
    build:
      context: .
      dockerfile: migrations.Dockerfile
    environment:
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/kennwilliamson
      SKIP_MIGRATIONS: ${SKIP_MIGRATIONS:-false}
      CONTAINER_CONTEXT: "true"
    volumes:
      - ./backend/migrations:/app/backend/migrations
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    profiles:
      - ssl-setup

volumes:
  postgres_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_webroot:
    driver: local

networks:
  default:
    driver: bridge